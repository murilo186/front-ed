// src/services/apiService.js

// ‚ö†Ô∏è IMPORTANTE: ALTERE ESTE IP PARA O IP DA SUA M√ÅQUINA
// Para descobrir seu IP:
// Windows: digite "ipconfig" no cmd
// Mac/Linux: digite "ifconfig" no terminal
// Use o IP da sua rede local (ex: 192.168.1.100)

const API_BASE_URL = "https://backend-production-5141.up.railway.app"; // üî¥ ALTERE AQUI!

class ApiService {
  // M√©todo auxiliar para fazer requisi√ß√µes
  async makeRequest(endpoint, options = {}) {
    try {
      const url = `${API_BASE_URL}${endpoint}`;
      console.log("üîó Fazendo requisi√ß√£o para:", url);

      const config = {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
        timeout: 10000, // 10 segundos de timeout
        ...options,
      };

      console.log("üì§ Dados enviados:", options.body || "Nenhum");

      const response = await fetch(url, config);

      console.log("üì• Status da resposta:", response.status);

      const data = await response.json();
      console.log("üìÑ Dados recebidos:", data);

      if (!response.ok) {
        throw new Error(data.error || `Erro HTTP: ${response.status}`);
      }

      return data;
    } catch (error) {
      console.error("‚ùå Erro na requisi√ß√£o:", error);

      // Verificar diferentes tipos de erro
      if (error.message === "Network request failed") {
        throw new Error(
          "Erro de conex√£o. Verifique:\n‚Ä¢ Se o servidor est√° rodando\n‚Ä¢ Se o IP est√° correto\n‚Ä¢ Sua conex√£o com a internet"
        );
      }

      if (error.message.includes("timeout")) {
        throw new Error(
          "Timeout na requisi√ß√£o. Servidor demorou para responder."
        );
      }

      throw error;
    }
  }

  // Login
  async login(email, senha) {
    if (!email || !senha) {
      throw new Error("Email e senha s√£o obrigat√≥rios");
    }

    return this.makeRequest("/auth/login", {
      method: "POST",
      body: JSON.stringify({
        email: email.trim().toLowerCase(),
        senha,
      }),
    });
  }

  // Cadastro
  async register(dadosUsuario) {
    const { nome, usuario, cpf, email, senha } = dadosUsuario;

    // Valida√ß√µes locais
    if (!nome || !usuario || !cpf || !email || !senha) {
      throw new Error("Todos os campos s√£o obrigat√≥rios");
    }

    // Limpar CPF (apenas n√∫meros)
    const cpfLimpo = String(cpf).replace(/\D/g, "");
    console.log("üì¶ Enviando CPF limpo:", cpfLimpo);

    return this.makeRequest("/auth/register", {
      method: "POST",
      body: JSON.stringify({
        nome: nome.trim(),
        usuario: usuario.trim().toLowerCase(),
        cpf: cpfLimpo,
        email: email.trim().toLowerCase(),
        senha,
      }),
    });
  }

  // Testar conex√£o com o servidor
  async testConnection() {
    try {
      const response = await this.makeRequest("/health");
      console.log("‚úÖ Conex√£o com servidor OK!");
      return response;
    } catch (error) {
      console.log("‚ùå Erro de conex√£o:", error.message);
      throw error;
    }
  }

  // M√©todo para configurar novo IP (√∫til para desenvolvimento)
  setBaseURL(newURL) {
    this.API_BASE_URL = newURL;
    console.log("üîÑ Nova URL configurada:", newURL);
  }

  // Getter para obter a URL atual
  getBaseURL() {
    return API_BASE_URL;
  }
}

// Exportar uma inst√¢ncia √∫nica (singleton)
export default new ApiService();
